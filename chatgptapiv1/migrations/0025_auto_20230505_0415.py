# Generated by Django 3.2 on 2023-05-04 20:15

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('chatgptapiv1', '0024_rolevoiceattribution_background_image'),
    ]

    operations = [
        migrations.AddField(
            model_name='blackbox',
            name='GPT_model_name',
            field=models.CharField(default='gpt-3.5-turbo', max_length=64, verbose_name='模型名称'),
        ),
        migrations.AddField(
            model_name='userinfo',
            name='GPT_4_8K',
            field=models.BooleanField(default=False, verbose_name='GPT4_8k开通'),
        ),
        migrations.AlterField(
            model_name='rolevoiceattribution',
            name='avatar',
            field=models.ImageField(default='default/adai.png', upload_to='images/', verbose_name='角色头像'),
        ),
        migrations.AlterField(
            model_name='rolevoiceattribution',
            name='background_image',
            field=models.ImageField(default='default/adai.png', upload_to='backgroundimages/', verbose_name='角色背景'),
        ),
        migrations.AlterField(
            model_name='rolevoiceattribution',
            name='chatgpt_frequency_penalty',
            field=models.DecimalField(decimal_places=2, default=1.0, help_text='Number between -2.0 and 2.0.Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the models likelihood to repeat the same line verbatim.当 frequency_penalty 值越大时，生成的文本中重复的词语会更少，从而增加文本的多样性', max_digits=7, validators=[django.core.validators.MinValueValidator(-2.0, message='Value must be greater than or equal to -2.0'), django.core.validators.MaxValueValidator(2.0, message='Value must be less than or equal to 2.0')], verbose_name='ChatGPT的FREQUENCY PENALTY'),
        ),
        migrations.AlterField(
            model_name='rolevoiceattribution',
            name='chatgpt_model_p',
            field=models.DecimalField(decimal_places=2, default=1, help_text='An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.We generally recommend altering this or temperature but not both.', max_digits=7, validators=[django.core.validators.MinValueValidator(0, message='Value must be greater than or equal to 0'), django.core.validators.MaxValueValidator(1.0, message='Value must be less than or equal to 1.0')], verbose_name='ChatGPT的top_P'),
        ),
        migrations.AlterField(
            model_name='rolevoiceattribution',
            name='chatgpt_model_temperature',
            field=models.DecimalField(decimal_places=2, default=0.8, help_text='What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.We generally recommend altering this or top_p but not both.', max_digits=7, validators=[django.core.validators.MinValueValidator(0, message='Value must be greater than or equal to 0'), django.core.validators.MaxValueValidator(1.0, message='Value must be less than or equal to 1.0')], verbose_name='ChatGPT的temperature'),
        ),
        migrations.AlterField(
            model_name='rolevoiceattribution',
            name='chatgpt_presence_penalty',
            field=models.DecimalField(decimal_places=2, default=0.6, help_text='Number between -2.0 and 2.0.Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the models likelihood to talk about new topics.当 presence_penalty 值越大时，生成的文本会更加准确，但也会限制生成的多样性', max_digits=7, validators=[django.core.validators.MinValueValidator(-2.0, message='Value must be greater than or equal to -2.0'), django.core.validators.MaxValueValidator(2.0, message='Value must be less than or equal to 2.0')], verbose_name='ChatGPT的PRESENCE_PENALTY'),
        ),
    ]
