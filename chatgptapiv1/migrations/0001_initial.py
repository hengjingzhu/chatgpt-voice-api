# Generated by Django 3.2 on 2023-03-07 20:31

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('customer_type', models.CharField(blank=True, choices=[('LimitedTime_UnlimitedRequest', '限时不限请求次数'), ('UnlimitedTime_LimitedRequest', '不限时限请求次数'), ('superuser', '超级用户')], max_length=255, null=True, verbose_name='客户类型')),
                ('token_expired_time', models.DateTimeField(blank=True, null=True, verbose_name='token到期时间')),
                ('api_request_left', models.CharField(blank=True, default=20, max_length=255, null=True, verbose_name='ChatGPT剩余次数')),
                ('jwt_token', models.CharField(blank=True, max_length=255, unique=True, verbose_name='jwt令牌')),
                ('status', models.CharField(blank=True, max_length=255, null=True, verbose_name='客户状态')),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否活跃')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '用户',
                'verbose_name_plural': '用户',
                'db_table': 'auth_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='RoleVoiceAttribution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('system_role', models.CharField(default='general', max_length=255, verbose_name='角色')),
                ('system_role_description', models.TextField(default='you are a helpful ai', verbose_name='角色描述')),
                ('system_role_random_weight', models.IntegerField(default=1, verbose_name='随机权重')),
                ('system_role_alivoice_role', models.CharField(default='zhimiao_emo', max_length=255, verbose_name='角色配音')),
                ('system_role_alivoice_samplerate', models.IntegerField(choices=[(8000, 8000), (16000, 16000)], default=16000, verbose_name='音频采样率')),
                ('system_role_alivoice_speechrate', models.DecimalField(decimal_places=2, default=0, max_digits=7, validators=[django.core.validators.MinValueValidator(-500, message='Value must be greater than or equal to -500'), django.core.validators.MaxValueValidator(500, message='Value must be less than or equal to 500')], verbose_name='语速')),
                ('system_role_alivoice_pitchrate', models.DecimalField(decimal_places=2, default=0, max_digits=7, validators=[django.core.validators.MinValueValidator(-500, message='Value must be greater than or equal to -500'), django.core.validators.MaxValueValidator(500, message='Value must be less than or equal to 500')], verbose_name='语调')),
                ('system_role_aivoice_speak_effect', models.CharField(blank=True, choices=[('robot', '机器人音效'), ('lolita', '萝莉音效'), ('lowpass', '萝莉音效'), ('echo', '回声音效'), ('lpfilter', '回声音效'), ('hpfilter', '高通滤波器')], max_length=255, verbose_name='角色音效')),
                ('system_role_alivoice_speak_emotion', models.CharField(default='gentle', max_length=255, verbose_name='emotion标签感情')),
                ('system_role_alivoice_speak_intensity', models.DecimalField(decimal_places=2, default=1.0, max_digits=5, validators=[django.core.validators.MinValueValidator(-0.01, message='Value must be greater than or equal to -0.01'), django.core.validators.MaxValueValidator(2.0, message='Value must be less than or equal to 2.0')], verbose_name='emotion情绪强度')),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否活跃')),
            ],
            options={
                'verbose_name': '用户',
                'verbose_name_plural': '用户',
                'db_table': 'rolevoiceattribution',
            },
        ),
        migrations.CreateModel(
            name='BlackBox',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('diolog', models.JSONField(blank=True, null=True, verbose_name='HistoryDialog')),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否活跃')),
                ('RoleVoiceAttribution', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to='chatgptapiv1.rolevoiceattribution')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'BlackBox',
                'verbose_name_plural': 'BlackBox',
                'db_table': 'blackbox',
            },
        ),
    ]
